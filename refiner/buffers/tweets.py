# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Volara

import flatbuffers
from flatbuffers.compat import import_numpy

np = import_numpy()


class Tweets(object):
    __slots__ = ["_tab"]

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Tweets()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTweets(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)

    # Tweets
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Tweets
    def Tweets(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from refiner.buffers.tweet import Tweet

            obj = Tweet()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Tweets
    def TweetsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Tweets
    def TweetsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0


def TweetsStart(builder):
    builder.StartObject(1)


def Start(builder):
    TweetsStart(builder)


def TweetsAddTweets(builder, tweets):
    builder.PrependUOffsetTRelativeSlot(
        0, flatbuffers.number_types.UOffsetTFlags.py_type(tweets), 0
    )


def AddTweets(builder, tweets):
    TweetsAddTweets(builder, tweets)


def TweetsStartTweetsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)


def StartTweetsVector(builder, numElems):
    return TweetsStartTweetsVector(builder, numElems)


def TweetsEnd(builder):
    return builder.EndObject()


def End(builder):
    return TweetsEnd(builder)
