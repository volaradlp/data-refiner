# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Volara

import flatbuffers
from flatbuffers.compat import import_numpy

np = import_numpy()


class Tweet(object):
    __slots__ = ["_tab"]

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Tweet()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTweet(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)

    # Tweet
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Tweet
    def Handle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Tweet
    def UserId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Tweet
    def TweetId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Tweet
    def Text(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Tweet
    def Likes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Tweet
    def Retweets(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Tweet
    def Replies(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Tweet
    def Quotes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Tweet
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(
                flatbuffers.number_types.Uint64Flags, o + self._tab.Pos
            )
        return 0

    # Tweet
    def SubtweetId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None


def TweetStart(builder):
    builder.StartObject(10)


def Start(builder):
    TweetStart(builder)


def TweetAddHandle(builder, handle):
    builder.PrependUOffsetTRelativeSlot(
        0, flatbuffers.number_types.UOffsetTFlags.py_type(handle), 0
    )


def AddHandle(builder, handle):
    TweetAddHandle(builder, handle)


def TweetAddUserId(builder, userId):
    builder.PrependUOffsetTRelativeSlot(
        1, flatbuffers.number_types.UOffsetTFlags.py_type(userId), 0
    )


def AddUserId(builder, userId):
    TweetAddUserId(builder, userId)


def TweetAddTweetId(builder, tweetId):
    builder.PrependUOffsetTRelativeSlot(
        2, flatbuffers.number_types.UOffsetTFlags.py_type(tweetId), 0
    )


def AddTweetId(builder, tweetId):
    TweetAddTweetId(builder, tweetId)


def TweetAddText(builder, text):
    builder.PrependUOffsetTRelativeSlot(
        3, flatbuffers.number_types.UOffsetTFlags.py_type(text), 0
    )


def AddText(builder, text):
    TweetAddText(builder, text)


def TweetAddLikes(builder, likes):
    builder.PrependInt32Slot(4, likes, 0)


def AddLikes(builder, likes):
    TweetAddLikes(builder, likes)


def TweetAddRetweets(builder, retweets):
    builder.PrependInt32Slot(5, retweets, 0)


def AddRetweets(builder, retweets):
    TweetAddRetweets(builder, retweets)


def TweetAddReplies(builder, replies):
    builder.PrependInt32Slot(6, replies, 0)


def AddReplies(builder, replies):
    TweetAddReplies(builder, replies)


def TweetAddQuotes(builder, quotes):
    builder.PrependInt32Slot(7, quotes, 0)


def AddQuotes(builder, quotes):
    TweetAddQuotes(builder, quotes)


def TweetAddCreatedAt(builder, createdAt):
    builder.PrependUint64Slot(8, createdAt, 0)


def AddCreatedAt(builder, createdAt):
    TweetAddCreatedAt(builder, createdAt)


def TweetAddSubtweetId(builder, subtweetId):
    builder.PrependUOffsetTRelativeSlot(
        9, flatbuffers.number_types.UOffsetTFlags.py_type(subtweetId), 0
    )


def AddSubtweetId(builder, subtweetId):
    TweetAddSubtweetId(builder, subtweetId)


def TweetEnd(builder):
    return builder.EndObject()


def End(builder):
    return TweetEnd(builder)
